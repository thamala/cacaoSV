//SLiM 3 (v3.3): script for simulating mutation accumulation inside inversions

initialize() {
	initializeMutationRate(7.77e-8);
	initializeMutationType("m1", 0, "g", -0.03, 0.12); //deleterious mutations
	initializeMutationType("m2", 0.5, "f", 0.0); // inversion marker
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(4.334e-06);
	//~91% of recombination events are gene conversions, giving a crossover rate of 3.94e-7 and a gene conversion rate of 3.94e-6
	initializeGeneConversion(0.9090909, 335, 1, 0);
}

recombination() {
	inv = genome1.countOfMutationsOfType(m2)+genome2.countOfMutationsOfType(m2);
	if(inv == 0 | inv == 2)
 		return F;
	breakpoints = breakpoints[!breakpoints]; //Crossovers are removed from heterozygotes
	return T; 
}

fitness(m2){
	if (genome1.countOfMutationsOfType(m2)+genome2.countOfMutationsOfType(m2)==1)
		return 1.015; //Fitness benefit for heterozygotes
	else
		return relFitness;
}

500000 late() {
	sim.tag = 0;
	sim.readFromPopulationFile("burn_in.txt"); //First 100*N generations were simulated separately
	defineConstant("simID", getSeed());
	sim.outputFull("/tmp/slim_" + simID + ".txt");
}

500001 late() {
	target = p1.genomes[1];
	target.addNewDrawnMutation(m2, 50000);
}


500002:600002 late(){
	if(sim.countOfMutationsOfType(m2)==0){
		if((sim.generation-500001) < 10000){ //If SV is lost within the first 1000 generations, simulation is restarted with new seed
			cat("SV lost at generation "+(sim.generation-500001)+", restarting\n");
			sim.readFromPopulationFile("/tmp/slim_" + simID + ".txt");
			setSeed(getSeed() + 1);
			sim.tag = 0;
			return;
		}
		else{
			cat("SV lost at generation "+(sim.generation-500001)+"\n");
			sim.simulationFinished();
			return;
		}
 	}
	else if((sim.generation-500001) == 1 | (sim.generation-500001) % 1000 == 0){
		tot = 0;
		while(tot == 0){
			samp = sample(p1.individuals, 100, T);
			tot = sum(samp.countOfMutationsOfType(m2));	
		}
		if(tot > 100)
			min_a = 0;
		else 
			min_a = 1;
		if(sim.tag == 0){
			writeFile("out.txt",paste("gen maj min freq"));
			sim.tag = 1;	
		}
		maj = 0;
		maj_i = 0;
		min = 0;
		min_i = 0;
		for(i in samp){
			muts0 = i.genomes[0].mutationsOfType(m1);
			sv0 = i.genomes[0].mutationsOfType(m2);
			muts1 = i.genomes[1].mutationsOfType(m1);
			sv1 = i.genomes[1].mutationsOfType(m2);
			if((sv0.size() == 1 & min_a == 1) | (sv0.size() == 0 & min_a == 0)){
				min = min + muts0.size();
				min_i = min_i + 100000;
			}
			else{
				maj = maj + muts0.size();
				maj_i = maj_i + 100000;
			}
			if((sv1.size() == 1 & min_a == 1) | (sv1.size() == 0 & min_a == 0)){
				min = min + muts1.size();
				min_i = min_i + 100000;
			}
			else{
				maj = maj + muts1.size();
				maj_i = maj_i + 100000;
			}
		}
		maj = maj / maj_i;
		if(min > 0)
			min = min / min_i;
		else
			min = "NA";
		writeFile("out.txt",paste((sim.generation-500001)+" "+maj+" "+min+" "+tot/200),append=T);
	}
}
